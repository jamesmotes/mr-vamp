"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List, Optional, Union, Callable
from pybullet_utils.bullet_client import BulletClient
from vamp.typing import *

"""
This type stub file was generated by pyright.
"""

@dataclass
class RobotAnimationConfig:
    robot_id: int
    plan: Any
    callback: Optional[Callable] = None
    speed: float = 1.0
    start_time: float = 0.0
    name: Optional[str] = None

@dataclass
class PyBulletSimulator:
    skel_id: bool
    client: BulletClient
    robots: Dict[int, Dict[str, Any]]
    
    def __init__(self, urdf: str, joints: List[str], visualize: bool = ...) -> None:
        ...
    
    def add_robot(self, robot_id: int, joints: List[int], name: str = ...) -> None:
        ...
    
    def set_joint_positions(self, positions: List[float], robot_id: Optional[int] = ...) -> None:
        ...
    
    def set_robot_base_position(self, position: Position, orientation: XYZWQuaternion = ..., robot_id: Optional[int] = ...) -> None:
        ...
    
    def set_camera(self, position: Position, look_at: Position):
        ...
    
    def add_capsule(self, radius: float, length: float, position: Position, rot_xyzw: XYZWQuaternion):
        ...
    
    def add_cylinder(self, radius: float, length: float, position: Position, rot_xyzw: XYZWQuaternion):
        ...
    
    def add_cuboid(self, half_extents: Vector3, position: Position, rot_xyzw: XYZWQuaternion):
        ...
    
    def add_sphere(self, radius: float, position: Position):
        ...
    
    def add_height_map(self, height_file: Path, texture_file: Optional[Path] = ..., scale: Vector3 = ..., center: Position = ...):
        ...
    
    def add_environment_from_problem_dict(self, problem: Dict[str, Any]):
        ...
    
    def draw_roadmap(self, fk_function, roadmap):
        ...
    
    def animate(self, plan, callback = ...):
        ...
    
    def animate_multi(self, robot_plans: Union[Dict[int, Any], List[int], Any], 
                     callbacks: Optional[Dict[int, Callable]] = ...,
                     plan: Optional[Any] = ...) -> None:
        ...
    
    def animate_multi_advanced(self, configs: List[RobotAnimationConfig]) -> None:
        ...


